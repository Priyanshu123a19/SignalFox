// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

enum Plan {
  FREE
  PRO
}

model User {
  id        String @id @default(cuid())
  externalId String @unique

  quotaLimit Int
  plan       Plan @default(FREE)

  email      String @unique
  apiKey     String @unique @default(cuid())
  discordId  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  EventCategories EventCategory[] 
  events          Event[]
  Quota           Quota[]

  //making the index for email and apiKey so that we can quickly look up users by these fields
  //the index works in following way
  // - when we query for a user by email or apiKey, the database can use the index to find the user more quickly
  // - this is especially important as the number of users grows, as it can significantly speed up lookups

  @@index([email, apiKey])

}

model EventCategory {
  id        String @id @default(cuid())
  name      String
  color     Int
  emoji     String?


  user      User @relation(fields: [userId], references: [id])
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
  //this unique constraint ensures that each user can only have one event category with a given name
  //its a helpful way to prevent duplicate EventCategories for the same user
  @@unique([name, userId])
}

enum DeliveryStatus {
  PENDING
  DELIVERED
  FAILED
}

//now each eventCategory must have multiple events
model Event {
  id         String   @id @default(cuid())
  formattedMessage String

  user     User @relation(fields: [userId], references: [id])
  userId   String

  name     String
  fields   Json

  deliveryStatus DeliveryStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  EventCategory EventCategory? @relation(fields: [eventCategoryId], references: [id])
  eventCategoryId String?

  //faster retrieval according to the createdAt field
  @@index([createdAt])
}

model Quota {
  id        String @id @default(cuid())
  user     User @relation(fields: [userId], references: [id])
  userId   String @unique

  year     Int
  month    Int
  count    Int @default(0)

  updatedAt DateTime @updatedAt
}